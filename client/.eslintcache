[{"D:\\Desktop\\hele\\client\\src\\index.js":"1","D:\\Desktop\\hele\\client\\src\\App.js":"2","D:\\Desktop\\hele\\client\\src\\pages\\Login.js":"3","D:\\Desktop\\hele\\client\\src\\pages\\Signup.js":"4","D:\\Desktop\\hele\\client\\src\\pages\\Home.js":"5","D:\\Desktop\\hele\\client\\src\\components\\header\\Header.js":"6","D:\\Desktop\\hele\\client\\src\\components\\BottleSingle\\BottleSingle.js":"7","D:\\Desktop\\hele\\client\\src\\utils\\mutations.js":"8","D:\\Desktop\\hele\\client\\src\\utils\\auth.js":"9","D:\\Desktop\\hele\\client\\src\\utils\\query.js":"10","D:\\Desktop\\hele\\client\\src\\components\\Dashboard\\Dashboard.js":"11","D:\\Desktop\\hele\\client\\src\\components\\BottleList\\BottleList.js":"12","D:\\Desktop\\hele\\client\\src\\components\\BottleForm\\BottleForm.js":"13","D:\\Desktop\\hele\\client\\src\\components\\BottleCard\\BottleCard.js":"14","D:\\Desktop\\hele\\client\\src\\utils\\BottleContext.js":"15"},{"size":276,"mtime":1655328888857,"results":"16","hashOfConfig":"17"},{"size":1925,"mtime":1655471212040,"results":"18","hashOfConfig":"17"},{"size":3623,"mtime":1655328888859,"results":"19","hashOfConfig":"17"},{"size":4461,"mtime":1655328888860,"results":"20","hashOfConfig":"17"},{"size":615,"mtime":1655490567435,"results":"21","hashOfConfig":"17"},{"size":920,"mtime":1655490445312,"results":"22","hashOfConfig":"17"},{"size":824,"mtime":1655491033283,"results":"23","hashOfConfig":"17"},{"size":1230,"mtime":1655480958170,"results":"24","hashOfConfig":"17"},{"size":1070,"mtime":1655328888861,"results":"25","hashOfConfig":"17"},{"size":606,"mtime":1655382575013,"results":"26","hashOfConfig":"17"},{"size":782,"mtime":1655328888855,"results":"27","hashOfConfig":"17"},{"size":774,"mtime":1655488942562,"results":"28","hashOfConfig":"17"},{"size":1246,"mtime":1655490815964,"results":"29","hashOfConfig":"17"},{"size":3109,"mtime":1655506313782,"results":"30","hashOfConfig":"17"},{"size":2658,"mtime":1655490996226,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"zqpblv",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},"D:\\Desktop\\hele\\client\\src\\index.js",[],["67","68"],"D:\\Desktop\\hele\\client\\src\\App.js",[],"D:\\Desktop\\hele\\client\\src\\pages\\Login.js",[],"D:\\Desktop\\hele\\client\\src\\pages\\Signup.js",[],"D:\\Desktop\\hele\\client\\src\\pages\\Home.js",[],"D:\\Desktop\\hele\\client\\src\\components\\header\\Header.js",[],"D:\\Desktop\\hele\\client\\src\\components\\BottleSingle\\BottleSingle.js",["69","70","71"],"import React, {useContext, useEffect, useState}from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport BottleContext from '../../utils/BottleContext'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport default function Single() {\r\n  let history = useHistory()\r\n  const{id} = useParams();\r\n\r\n  const {GetSingleBottle,deleteBottleHandler,bottleTextState,bottleTimeState} = useContext(BottleContext)\r\n\r\n\r\n \r\n\r\n\r\n  useEffect(async()=> {\r\n    GetSingleBottle(id)\r\n  },[])\r\n\r\n  const DeleteAndRefresh = async () => {\r\n    await deleteBottleHandler(id)\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div>{bottleTextState}</div> \r\n    <div>{bottleTimeState}</div>\r\n    <button onClick={() => GetSingleBottle()}>Clickj</button>\r\n    <button onClick={DeleteAndRefresh}>Delete Bottle</button>\r\n    </>\r\n  )\r\n}\r\n","D:\\Desktop\\hele\\client\\src\\utils\\mutations.js",[],"D:\\Desktop\\hele\\client\\src\\utils\\auth.js",[],"D:\\Desktop\\hele\\client\\src\\utils\\query.js",[],"D:\\Desktop\\hele\\client\\src\\components\\Dashboard\\Dashboard.js",["72","73","74","75","76","77"],"import React, { useEffect, useState,  } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUERY_SINGLE_BOTTLE } from '../../utils/query';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment'\r\nimport Auth from '../../utils/auth';\r\nexport default function Dashboard({dataSingleBottle}) {\r\n  // const [usewuery, { data } ]= useLazyQuery(QUERY_SINGLE_BOTTLE, {\r\n  //   variables: { BottleAuthor: Auth.getProfile().data.username },\r\n  // });\r\n\r\n  // useEffect(()=> {\r\n  //   usewuery()\r\n  // }, [])\r\n  // const singleBottleResult = data?.getSingleBottle.bottleTime\r\n  // const recentBottleDate = new Date(singleBottleResult)\r\n  return (\r\n    <>\r\n    <div>\r\n      Last feeding was <Moment fromNow>{dataSingleBottle}</Moment>\r\n    </div>\r\n    </>\r\n  );\r\n}","D:\\Desktop\\hele\\client\\src\\components\\BottleList\\BottleList.js",[],"D:\\Desktop\\hele\\client\\src\\components\\BottleForm\\BottleForm.js",[],"D:\\Desktop\\hele\\client\\src\\components\\BottleCard\\BottleCard.js",["78"],"import React, { useState } from 'react';\r\n// import { useMutation } from '@apollo/client';\r\n// import { REMOVE_BOTTLE, UPDATE_BOTTLE } from '../../utils/mutations';\r\nimport bottlecute from '../Images/bottlecute.png';\r\nimport './BottleCard.css';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst BottleCard = ({  bottleIdx, bottleText, bottleTime }) => {\r\n  const [bottleTextState, setBottleTextState] = useState(bottleText);\r\n  const [bottleTimeState, setBottleTimeState] = useState(bottleTime);\r\n\r\n  const [onUpdate, setonUpdate] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const handleChangeText = (event) => {\r\n    const { value } = event.target;\r\n    setBottleTextState(value);\r\n  };\r\n\r\n  const handleChangeTime = (event) => {\r\n    const { value } = event.target;\r\n\r\n    setBottleTimeState(value);\r\n  };\r\n  \r\n\r\n  function linktobottle() {\r\n    history.push(`/bottle/${bottleIdx}`);  \r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n        backgroundColor: '#ffa238',\r\n        height: '100px',\r\n        width: '300px',\r\n        marginBottom: '10px',\r\n        borderRadius: '20px',\r\n      }}\r\n      onClick={() => linktobottle()}\r\n    >\r\n      <div className=\"card-mini\">\r\n        <div\r\n          className=\"pls \"\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            alignItems: 'space-between',\r\n            justifyContent: 'space-evenly',\r\n          }}\r\n        >\r\n          <div>\r\n            <img src={bottlecute} className=\"img-cute\" alt=\"bottle-cute\" />\r\n          </div>\r\n          <div>\r\n            <div className=\"card-text\">{new Date(bottleTimeState).toLocaleString('en-US', { hour: 'numeric', hour12: true, minute: '2-digit' })}  </div>\r\n            \r\n            <div className=\"card-text\">{bottleTextState} oz</div>\r\n          </div>\r\n        </div>\r\n        {!onUpdate ? (\r\n          <></>\r\n        ) : (\r\n          <>\r\n            <input\r\n              className=\"input\"\r\n              type=\"time\"\r\n              placeholder={bottleTimeState}\r\n              onChange={handleChangeTime}\r\n              defaultValue={bottleTimeState}\r\n            ></input>\r\n            <input\r\n              className=\"input\"\r\n              onChange={handleChangeText}\r\n              defaultValue={bottleTextState}\r\n            ></input>{' '}\r\n          </>\r\n        )}\r\n      </div>\r\n      {/* <div className=\"btn-container\">\r\n        {!onUpdate ? (\r\n          <button\r\n            className=\"btn btn-dng\"\r\n            style={{ backgroundColor: '#ee3232', color: 'white' }}\r\n            onClick={() => deleteBottleHandle(bottleIdx)}\r\n          >\r\n            Delete\r\n          </button>\r\n        ) : (\r\n          <button className=\"btn\" onClick={updateBottleHandle}>\r\n            Update\r\n          </button>\r\n        )}\r\n        <button className=\"btn\" onClick={ToggleupdateHandler}>\r\n          Edit\r\n        </button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BottleCard;\r\n","D:\\Desktop\\hele\\client\\src\\utils\\BottleContext.js",["79","80","81","82","83","84"],"import React, { createContext, useEffect, useState } from 'react';\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { QUERY_BOTTLES, QUERY_SINGLE_BOTTLE } from '../utils/query';\r\nimport {REMOVE_BOTTLE, ADD_BOTTLE} from '../utils/mutations'\r\n\r\nimport Auth from '../utils/auth';\r\n\r\n\r\nconst BottleContext = createContext();\r\nexport const BottleProvider = ({ children }) => {\r\n\r\n  const [queryOnMutate, setQueryOnMutate] = useState(false)\r\n  const [addBottle] = useMutation(ADD_BOTTLE);\r\n  const [fetchBottles] = useLazyQuery(QUERY_BOTTLES)\r\n  const [bottleText, setBottleText] = useState('');\r\n  const [bottleTime, setBottleTime] = useState('');\r\n  const [bottleTextState, setSingleBottleText]= useState('')\r\n  const [bottleTimeState, setSingleBottleTime]= useState('')\r\n  const [loadBottles, {data}] = useLazyQuery(QUERY_BOTTLES\r\n    // fetchPolicy: \"network-only\",\r\n    // nextFetchPolicy: 'cache-first',\r\n    // variables: { BottleAuthor: Auth.getProfile().data.username },\r\n );\r\n\r\n  const [loadSingleBottle, {status}] = useLazyQuery(QUERY_SINGLE_BOTTLE)\r\n  const [deleteBottle] = useMutation(REMOVE_BOTTLE)\r\n\r\n\r\n  const deleteBottleHandler = async (id) => {\r\n    try {\r\n      await deleteBottle({\r\n      variables:{ id: id}, \r\n        refetchQueries: [{ query: QUERY_BOTTLES, variables: { BottleAuthor: Auth.getProfile().data.username }}]\r\n      })\r\n      \r\n      return\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  const handleBottleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (bottleText === '') {\r\n      return;\r\n    }\r\n    try {\r\n      await addBottle({\r\n        variables: {\r\n          bottleText,\r\n          bottleTime,\r\n          bottleAuthor: Auth.getProfile().data.username,\r\n        },\r\n        refetchQueries: [{ query: QUERY_BOTTLES, variables: { BottleAuthor: Auth.getProfile().data.username }}]\r\n      });\r\n      setBottleText('');\r\n      setBottleTime('');\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n\r\n  \r\n  const GetSingleBottle = async (id) => {\r\n    const responseSingleBottle = await loadSingleBottle({variables: {_id: id}})\r\n    const {bottleTime, bottleText}= responseSingleBottle.data.getSingleBottle\r\n    if(bottleText && bottleTime ) {\r\n      setSingleBottleText(bottleText)\r\n      setSingleBottleTime(bottleTime)\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <BottleContext.Provider value={{ loadSingleBottle, deleteBottleHandler,handleBottleFormSubmit,setBottleText,setBottleTime ,bottleText,bottleTime,data,bottleTextState,bottleTimeState,GetSingleBottle}}>\r\n          {children}\r\n      </BottleContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BottleContext;\r\n",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":39,"nodeType":"91","messageId":"92","endLine":1,"endColumn":47},{"ruleId":"93","severity":1,"message":"94","line":16,"column":13,"nodeType":"95","endLine":18,"endColumn":4},{"ruleId":"93","severity":1,"message":"96","line":18,"column":5,"nodeType":"97","endLine":18,"endColumn":7,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":1,"column":28,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"89","severity":1,"message":"100","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":22},{"ruleId":"89","severity":1,"message":"101","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":29},{"ruleId":"89","severity":1,"message":"102","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":14},{"ruleId":"89","severity":1,"message":"103","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":12},{"ruleId":"89","severity":1,"message":"104","line":12,"column":20,"nodeType":"91","messageId":"92","endLine":12,"endColumn":31},{"ruleId":"89","severity":1,"message":"99","line":1,"column":32,"nodeType":"91","messageId":"92","endLine":1,"endColumn":41},{"ruleId":"89","severity":1,"message":"105","line":12,"column":10,"nodeType":"91","messageId":"92","endLine":12,"endColumn":23},{"ruleId":"89","severity":1,"message":"106","line":12,"column":25,"nodeType":"91","messageId":"92","endLine":12,"endColumn":41},{"ruleId":"89","severity":1,"message":"107","line":14,"column":10,"nodeType":"91","messageId":"92","endLine":14,"endColumn":22},{"ruleId":"89","severity":1,"message":"108","line":19,"column":10,"nodeType":"91","messageId":"92","endLine":19,"endColumn":21},{"ruleId":"89","severity":1,"message":"109","line":25,"column":29,"nodeType":"91","messageId":"92","endLine":25,"endColumn":35},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'GetSingleBottle' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["112"],"'useEffect' is defined but never used.","'useLazyQuery' is defined but never used.","'QUERY_SINGLE_BOTTLE' is defined but never used.","'moment' is defined but never used.","'Auth' is defined but never used.","'setonUpdate' is assigned a value but never used.","'queryOnMutate' is assigned a value but never used.","'setQueryOnMutate' is assigned a value but never used.","'fetchBottles' is assigned a value but never used.","'loadBottles' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},"Update the dependencies array to be: [GetSingleBottle, id]",{"range":"115","text":"116"},[478,480],"[GetSingleBottle, id]"]